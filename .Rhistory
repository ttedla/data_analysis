group_by(yearID)
## Subsetting + Median grouped by yearID#
my_data_arranged %>%
group_by(yearID) %>%
summarise(median_AB = median(AB))
View(my_data_arranged)
## Subsetting + Median grouped by yearID#
my_data_arranged %>%
group_by(lgID) %>%
summarise(median_at_b_league = median(AB))
## Subsetting + Median grouped by yearID#
my_data_arranged %>%
group_by(lgID) %>%
summarise(median_at_b_league = median(AB),
median_at_b_gt_zero = median(median_at_b_league(AB[AB>0])))
## Subsetting + Median grouped by yearID#
my_data_arranged %>%
group_by(lgID) %>%
summarise(median_at_b_league = median(AB),
median_at_b_gt_zero = median(AB[AB>0]))
setwd("~/data_analysis/")
# -------------------------------------------------------------------------
# Function in summarise() #
# -------------------------------------------------------------------------
library(dplyr)
library(ggplot2)
# -------------------------------------------------------------------------
my_data <- read.csv("./data/batting_data.csv", header = T, stringsAsFactors = F)
my_data <- as_tibble(my_data)
# -------------------------------------------------------------------------
# select playerID, yearID, AB, teamID, lgID, G, R, HR, SH and
# arrange using playerID, teamID, yearID
# -------------------------------------------------------------------------
my_data_arranged <- my_data %>%
select(playerID, yearID, AB, teamID, lgID, G, R, HR, SH) %>%
arrange(playerID, teamID, yearID)
# -------------------------------------------------------------------------
# Sum
# Another useful function to aggregate the variable is sum().
#
# You can check which leagues have the more homeruns.
# -------------------------------------------------------------------------
View(my_data_arranged)
# -------------------------------------------------------------------------
my_data_arranged %>%
group_by(lgID) %>%
summarise(sum(HR))
# -------------------------------------------------------------------------
my_data_arranged %>%
group_by(lgID) %>%
summarise(Sum_home_run=sum(HR))
setwd("~/data_analysis/")
# -------------------------------------------------------------------------
# Function in summarise() #
# -------------------------------------------------------------------------
library(dplyr)
library(ggplot2)
# -------------------------------------------------------------------------
my_data <- read.csv("./data/batting_data.csv", header = T, stringsAsFactors = F)
my_data <- as_tibble(my_data)
# -------------------------------------------------------------------------
# select playerID, yearID, AB, teamID, lgID, G, R, HR, SH and
# arrange using playerID, teamID, yearID
# -------------------------------------------------------------------------
my_data_arranged <- my_data %>%
select(playerID, yearID, AB, teamID, lgID, G, R, HR, SH) %>%
arrange(playerID, teamID, yearID)
# -------------------------------------------------------------------------
my_data_arranged %>%
group_by(lgID) %>%
summarise(sd_hr = sd(HR))
my_data_arranged %>%
group_by(teamID) %>%
summarise(sd_hr = sd(HR))
my_data_arranged %>%
group_by(playerID) %>%
summarise(min_hr = min(HR), max_hr = max(HR))
my_data_arranged %>%
group_by(playerID) %>%
summarise(min_hr = min(G), max_hr = max(G))
setwd("~/data_analysis/")
library(dplyr)
library(ggplot2)
# -------------------------------------------------------------------------
my_data <- read.csv("./data/batting_data.csv", header = T, stringsAsFactors = F)
my_data <- as_tibble(my_data)
my_data_arranged <- my_data %>%
select(playerID, yearID, AB, teamID, lgID, G, R, HR, SH) %>%
arrange(playerID, teamID, yearID)
my_data_arranged %>%
group_by(playerID) %>%
summarise(no_years = n()) %>%
arrange(no_years)
View(my_data_d)
# -------------------------------------------------------------------------
my_data_d %>%
group_by(group)%>%
summarise(ind_count = n()) %>%
arrange(ind_count)
# -------------------------------------------------------------------------
my_data_d %>%
group_by(ind)%>%
summarise(ind_count = n()) %>%
arrange(ind_count)
# -------------------------------------------------------------------------
my_data_d %>%
group_by(group)%>%
summarise(ind_count = n()) %>%
arrange(ind_count)
View(my_data_d)
# -------------------------------------------------------------------------
my_data_d %>%
group_by(group, person) %>%
summarise(ind_count = n()) %>%
arrange(ind_count)
# -------------------------------------------------------------------------
my_data_d %>%
group_by(group, person) %>%
summarise(ind_count = n()) %>%
arrange(desc(ind_count))
# -------------------------------------------------------------------------
my_data_d %>%
select(everything())
# -------------------------------------------------------------------------
my_data_d %>%
select(everything()) %>%
group_by(group, person) %>%
summarise(ind_count = n()) %>%
arrange(desc(ind_count))
# -------------------------------------------------------------------------
my_data_d %>%
select(everything()) %>%
group_by(person, group) %>%
summarise(ind_count = n()) %>%
arrange(desc(ind_count))
# -------------------------------------------------------------------------
my_data_d %>%
select(everything()) %>%
group_by(person, group, ind) %>%
summarise(ind_count = n()) %>%
arrange(desc(ind_count))
# -------------------------------------------------------------------------
my_data_d %>%
select(everything()) %>%
group_by(ind, person, group) %>%
summarise(ind_count = n()) %>%
arrange(desc(ind_count))
# -------------------------------------------------------------------------
my_data_d %>%
select(everything()) %>%
group_by(ind, person, group) %>%
summarise(ind_count = n())
# -------------------------------------------------------------------------
my_data_d %>%
select(everything()) %>%
group_by(group) %>%
summarise(ind_count = n()) %>%
arrange(desc(ind_count))
# -------------------------------------------------------------------------
my_data_d %>%
select(everything()) %>%
group_by(group) %>%
summarise(ind_count = n()) %>%
arrange(desc(ind_count))
# -------------------------------------------------------------------------
my_data_d %>%
select(everything()) %>%
group_by(everything()) %>%
summarise(ind_count = n()) %>%
arrange(desc(ind_count))
# -------------------------------------------------------------------------
my_data_d %>%
select(everything()) %>%
group_by(ind,person) %>%
summarise(ind_count = n()) %>%
arrange(desc(ind_count))
# -------------------------------------------------------------------------
my_data_d %>%
select(everything()) %>%
group_by(ind,person, group) %>%
summarise(ind_count = n()) %>%
arrange(desc(ind_count))
head(my_data_d)
# -------------------------------------------------------------------------
my_data_d %>%
select(everything()) %>%
group_by(group, person, ind) %>%
summarise(ind_count = n()) %>%
arrange(desc(ind_count))
head(my_data_d)
my_data_arranged %>%
group_by(playerID) %>%
summarise(no_years = n()) %>%
arrange(no_years)
setwd("~/data_analysis/")
# -------------------------------------------------------------------------
# R Aggregate Function: Summarise & Group_by() #
# -------------------------------------------------------------------------
library(dplyr)
# -------------------------------------------------------------------------
my_data <- read.csv("./data/batting_data.csv", header = T, stringsAsFactors = F)
my_data <- as_tibble(my_data)
# -------------------------------------------------------------------------
# select playerID, yearID, AB, teamID, lgID, G, R, HR, SH and
# arrange using playerID, teamID, yearID
# -------------------------------------------------------------------------
my_data_arranged <- my_data %>%
select(playerID, yearID, AB, teamID, lgID, G, R, HR, SH) %>%
arrange(playerID, teamID, yearID)
my_data_arranged %>%
group_by(yearID) %>%
summarise(first_player = first(playerID), last_player = last(playerID))
my_data_arranged %>%
group_by(playerID) %>%
summarise(first_player = first(yearID), last_player = last(yearID))
my_data_arranged %>%
group_by(playerID) %>%
summarise(first_appearance = first(yearID), last_appearance = last(yearID))
x <- c(4, 1, 7, 2)
as.numeric(factor(x))
x
factor(x)
as.numeric(factor(x))
setwd("~/data_analysis/")
# -------------------------------------------------------------------------
# R Aggregate Function: Summarise & Group_by() #
# -------------------------------------------------------------------------
library(dplyr)
# -------------------------------------------------------------------------
my_data <- read.csv("./data/batting_data.csv", header = T, stringsAsFactors = F)
my_data <- as_tibble(my_data)
# -------------------------------------------------------------------------
# select playerID, yearID, AB, teamID, lgID, G, R, HR, SH and
# arrange using playerID, teamID, yearID
# -------------------------------------------------------------------------
my_data_arranged <- my_data %>%
select(playerID, yearID, AB, teamID, lgID, G, R, HR, SH) %>%
arrange(playerID, teamID, yearID)
# -------------------------------------------------------------------------
# The pipe operato (%>%) r works with ggplot() as well. You can easily show
# the summary statistic with a graph. All the steps are pushed inside
# the pipeline until the grap is plot. It seems more visual to see the
# average homerun by league with a bar char. The code below demonstrates
# the power of combining group_by(), summarise() and ggplot() together.
# -------------------------------------------------------------------------
my_data_arranged %>%
group_by(teamID) %>%
summarise(year_played = yearID == 2)
my_data_arranged %>%
group_by(teamID) %>%
summarise(yearID == 2)
my_data_arranged %>%
group_by(teamID) %>%
summarise(second_game = nth(yearID,2))
my_data_arranged %>%
group_by(teamID) %>%
summarise(second_game = nth(yearID,2)) %>%
arrange(second_game)
setwd("~/data_analysis/")
# -------------------------------------------------------------------------
# R Aggregate Function: Summarise & Group_by() #
# -------------------------------------------------------------------------
library(dplyr)
# -------------------------------------------------------------------------
my_data <- read.csv("./data/batting_data.csv", header = T, stringsAsFactors = F)
my_data <- as_tibble(my_data)
# -------------------------------------------------------------------------
# select playerID, yearID, AB, teamID, lgID, G, R, HR, SH and
# arrange using playerID, teamID, yearID
# -------------------------------------------------------------------------
my_data_arranged <- my_data %>%
select(playerID, yearID, AB, teamID, lgID, G, R, HR, SH) %>%
arrange(playerID, teamID, yearID)
# -------------------------------------------------------------------------
# The pipe operato (%>%) r works with ggplot() as well. You can easily show
# the summary statistic with a graph. All the steps are pushed inside
# the pipeline until the grap is plot. It seems more visual to see the
# average homerun by league with a bar char. The code below demonstrates
# the power of combining group_by(), summarise() and ggplot() together.
# -------------------------------------------------------------------------
my_data_arranged %>%
group_by(playerID) %>%
summarise(n_distinct())
my_data_arranged %>%
group_by(playerID) %>%
summarise(n_distinct(yearID))
my_data_arranged %>%
group_by(teamID) %>%
summarise(n_distinct(yearID))
my_data_arranged %>%
group_by(teamID) %>%
summarise(n_distinct(playerID))
my_data_arranged %>%
group_by(teamID) %>%
summarise(no_players = n_distinct(playerID)) %>%
arrange(desc(no_players))
my_data_arranged %>%
group_by(teamID, yearID) %>%
summarise(no_players = n_distinct(playerID)) %>%
arrange(desc(no_players))
my_data_arranged %>%
group_by(teamID, yearID) %>%
summarise(no_players = n_distinct(playerID)) %>%
arrange(desc(teamID))
my_data_arranged %>%
group_by(teamID) %>%
summarise(no_players = n_distinct(playerID)) %>%
arrange(desc(no_players))
setwd("~/data_analysis/")
# -------------------------------------------------------------------------
# R Aggregate Function: Summarise & Group_by() #
# -------------------------------------------------------------------------
library(dplyr)
# -------------------------------------------------------------------------
my_data <- read.csv("./data/batting_data.csv", header = T, stringsAsFactors = F)
my_data <- as_tibble(my_data)
# -------------------------------------------------------------------------
# select playerID, yearID, AB, teamID, lgID, G, R, HR, SH and
# arrange using playerID, teamID, yearID
# -------------------------------------------------------------------------
my_data_arranged <- my_data %>%
select(playerID, yearID, AB, teamID, lgID, G, R, HR, SH) %>%
arrange(playerID, teamID, yearID)
# -------------------------------------------------------------------------
# The pipe operato (%>%) r works with ggplot() as well. You can easily show
# the summary statistic with a graph. All the steps are pushed inside
# the pipeline until the grap is plot. It seems more visual to see the
# average homerun by league with a bar char. The code below demonstrates
# the power of combining group_by(), summarise() and ggplot() together.
# -------------------------------------------------------------------------
my_data_arranged %>%
group_by(yearID, teamID) %>%
summarise(mean_games = mean(G)) %>%
arrange(teamID, yearID)
my_data_arranged %>%
group_by(yearID, teamID) %>%
summarise(mean_games = mean(G)) %>%
arrange(desc(teamID, yearID))
setwd("~/data_analysis/")
# -------------------------------------------------------------------------
# R Aggregate Function: Summarise & Group_by() #
# -------------------------------------------------------------------------
library(dplyr)
# -------------------------------------------------------------------------
my_data <- read.csv("./data/batting_data.csv", header = T, stringsAsFactors = F)
my_data <- as_tibble(my_data)
# -------------------------------------------------------------------------
# select playerID, yearID, AB, teamID, lgID, G, R, HR, SH and
# arrange using playerID, teamID, yearID
# -------------------------------------------------------------------------
my_data_arranged <- my_data %>%
select(playerID, yearID, AB, teamID, lgID, G, R, HR, SH) %>%
arrange(playerID, teamID, yearID)
# -------------------------------------------------------------------------
# The pipe operato (%>%) r works with ggplot() as well. You can easily show
# the summary statistic with a graph. All the steps are pushed inside
# the pipeline until the grap is plot. It seems more visual to see the
# average homerun by league with a bar char. The code below demonstrates
# the power of combining group_by(), summarise() and ggplot() together.
# -------------------------------------------------------------------------
View(my_data_arranged)
my_data_arranged %>%
filter(yearID > 1981) %>%
group_by(yearID) %>%
summarise(mean_game_year = mean(G))
my_data_arranged %>%
filter(yearID > 1980) %>%
group_by(yearID) %>%
summarise(mean_game_year = mean(G))
setwd("~/data_analysis/")
# -------------------------------------------------------------------------
# R Aggregate Function: Summarise & Group_by() #
# -------------------------------------------------------------------------
library(dplyr)
# -------------------------------------------------------------------------
my_data <- read.csv("./data/batting_data.csv", header = T, stringsAsFactors = F)
my_data <- as_tibble(my_data)
# -------------------------------------------------------------------------
# select playerID, yearID, AB, teamID, lgID, G, R, HR, SH and
# arrange using playerID, teamID, yearID
# -------------------------------------------------------------------------
my_data_arranged <- my_data %>%
select(playerID, yearID, AB, teamID, lgID, G, R, HR, SH) %>%
arrange(playerID, teamID, yearID)
# -------------------------------------------------------------------------
# The pipe operato (%>%) r works with ggplot() as well. You can easily show
# the summary statistic with a graph. All the steps are pushed inside
# the pipeline until the grap is plot. It seems more visual to see the
# average homerun by league with a bar char. The code below demonstrates
# the power of combining group_by(), summarise() and ggplot() together.
# -------------------------------------------------------------------------
my_data_arranged %>%
filter(HR > 0) %>%   # filter where HR > 0
group_by(playerID) %>%  # group by ID where HR >0
summarise(avg_HR_Game = sum(HR)/sum(G)) %>% # compute sum(HR)/sum(G)
ungroup() %>% # ungroup avg_HR_Game
summarise(avg_HR = mean(avg_HR_Game))  # do a mean of avg_HR_Game
group_by(my_data_arranged, yearID)
group_by(my_data_arranged, yearID, G)
group_by(my_data_arranged, desc(yearID), G)
## load required packages
library(tidyverse) # tidyverse v 1.2.1 with ggplot2 v 3.2.0
## set seed
set.seed(500)
## create tibble with randomly generated data
data <-
tibble(id = 1:20,
## column with friends who support same team
same = round(runif(20, 0, 5), 0),
## column with friends who support different team
diff = round(runif(20, 0, 5 - same), 0),
## column with friends who support no team
none = 5 - (same + diff),
## column that checks total equals 5
total = if_else(same + diff + none == 5, TRUE, FALSE))
## create plot
data %>%
gather(friends, number, c("same", "diff", "none")) %>%
ggplot() +
geom_bar(aes(x = number, fill = friends),
stat = "count",
## preserve to not drop counts of 0
position = position_dodge(preserve = "single")) +
## set axes to make plot more legible
scale_x_discrete(limits = c(0:5)) +
scale_y_continuous(breaks = seq(0, 20, 1)) +
theme_classic()
head(data)
## load required packages
library(tidyverse) # tidyverse v 1.2.1 with ggplot2 v 3.2.0
## set seed
set.seed(500)
## create tibble with randomly generated data
data <-
tibble(id = 1:20,
## column with friends who support same team
same = round(runif(20, 0, 5), 0),
## column with friends who support different team
diff = round(runif(20, 0, 5 - same), 0),
## column with friends who support no team
none = 5 - (same + diff),
## column that checks total equals 5
total = if_else(same + diff + none == 5, TRUE, FALSE))
## create plot
data %>%
gather(friends, number, c("same", "diff", "none")) %>%
ggplot() +
geom_bar(aes(x = number, fill = friends),
stat = "count",
## preserve to not drop counts of 0
position = position_dodge(preserve = "single")) +
## set axes to make plot more legible
scale_x_discrete(limits = c(0:5)) +
scale_y_continuous(breaks = seq(0, 20, 1)) +
theme_classic() + facet_wrap(~ data$same + data$diff)
head(data)
## load required packages
library(tidyverse) # tidyverse v 1.2.1 with ggplot2 v 3.2.0
## set seed
set.seed(500)
## create tibble with randomly generated data
data <-
tibble(id = 1:20,
## column with friends who support same team
same = round(runif(20, 0, 5), 0),
## column with friends who support different team
diff = round(runif(20, 0, 5 - same), 0),
## column with friends who support no team
none = 5 - (same + diff),
## column that checks total equals 5
total = if_else(same + diff + none == 5, TRUE, FALSE))
## create plot
data %>%
gather(friends, number, c("same", "diff", "none")) %>%
ggplot() +
geom_bar(aes(x = number, fill = friends),
stat = "count",
## preserve to not drop counts of 0
position = position_dodge(preserve = "single")) +
## set axes to make plot more legible
scale_x_discrete(limits = c(0:5)) +
scale_y_continuous(breaks = seq(0, 20, 1)) +
theme_classic() + facet_wrap(~ data$same + data$diff + data$none)
head(data)
## load required packages
library(tidyverse) # tidyverse v 1.2.1 with ggplot2 v 3.2.0
## set seed
set.seed(500)
## create tibble with randomly generated data
data <-
tibble(id = 1:20,
## column with friends who support same team
same = round(runif(20, 0, 5), 0),
## column with friends who support different team
diff = round(runif(20, 0, 5 - same), 0),
## column with friends who support no team
none = 5 - (same + diff),
## column that checks total equals 5
total = if_else(same + diff + none == 5, TRUE, FALSE))
## create plot
data %>%
gather(friends, number, c("same", "diff", "none")) %>%
ggplot() +
geom_bar(aes(x = number, fill = friends),
stat = "count",
## preserve to not drop counts of 0
position = position_dodge(preserve = "single")) +
## set axes to make plot more legible
scale_x_discrete(limits = c(0:5)) +
scale_y_continuous(breaks = seq(0, 20, 1)) +
theme_classic() + facet_wrap(~ data$same + data$diff + data$none, nrow = 2)
head(data)
