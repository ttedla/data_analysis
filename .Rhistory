mutate(area = case_when(bat.depth>= -500 & Latitude >= -20.0000)~ "AR",
(bat.depth <= -500 & Latitude >= -20.0000)~ "AR",
(bat.depth<= -500 & Latitude <= -20.00000)~ "AM",
(bat.depth>= -500 & Latitude >= -20.0000)~ "AM",
(bat.depth>= -500 & Latitude >= -20.0000), "Aa",
TRUE~as.integer(NA))
head(df)
df %>%
mutate(area = case_when(bat.depth>= -500 & Latitude >= -20.0000)~ "AR",
(bat.depth <= -500 & Latitude >= -20.0000)~ "AR",
(bat.depth<= -500 & Latitude <= -20.00000)~ "AM",
(bat.depth>= -500 & Latitude >= -20.0000)~ "AM",
(bat.depth>= -500 & Latitude >= -20.0000), "Aa"))
df %>%
mutate(area = case_when(bat.depth>= -500 & Latitude >= -20.0000) ~ "AR",
(bat.depth <= -500 & Latitude >= -20.0000) ~ "AR",
(bat.depth<= -500 & Latitude <= -20.00000) ~ "AM",
(bat.depth>= -500 & Latitude >= -20.0000) ~ "AM",
(bat.depth>= -500 & Latitude >= -20.0000) ~ "Aa")
head(df)
df %>%
(bat.depth>= -500 & Latitude >= -20.0000) ~ "AR",
)
df %>%
mutate(area = case_when(
(bat.depth>= -500 & Latitude >= -20.0000) ~ "AR"
))
df <- read.csv("~/stackOverflow_qns/df_example.csv", header = T)
head(df)
df %>%
mutate(area = case_when(
(bat.depth>= -500 & Latitude >= -20.0000) ~ "AR"
(bat.depth<= -500 & Latitude >= -20.0000) ~ "AR"
))
df <- read.csv("~/stackOverflow_qns/df_example.csv", header = T)
head(df)
df %>%
mutate(area = case_when(
(bat.depth>= -500 & Latitude >= -20.0000) ~ "AR",
(bat.depth<= -500 & Latitude >= -20.0000) ~ "AR"
))
df <- read.csv("~/stackOverflow_qns/df_example.csv", header = T)
head(df)
df %>%
mutate(area = case_when(
(bat.depth>= -500 & Latitude >= -20.0000) ~ "AR",
(bat.depth<= -500 & Latitude >= -20.0000) ~ "AR",
(bat.depth<= -500 & Latitude >= -20.0000) ~ "AM"
))
head(df)
df %>%
mutate(area = case_when(
(bat.depth>= -500 & Latitude >= -20.0000) ~ "AR",
(bat.depth<= -500 & Latitude >= -20.0000) ~ "AR",
(bat.depth<= -500 & Latitude <= -20.0000) ~ "AM",
(bat.depth>= -500 & Latitude <= -20.0000) ~ "AR"
))
df <- read.csv("~/stackOverflow_qns/df_example.csv", header = T)
head(df)
df %>%
mutate(area = case_when(
(bat.depth>= -500 & Latitude >= -20.0000) ~ "AR",
(bat.depth<= -500 & Latitude >= -20.0000) ~ "AR",
(bat.depth<= -500 & Latitude <= -20.0000) ~ "AM",
(bat.depth>= -500 & Latitude <= -20.0000) ~ "AR",
(Latitude <= -51.0000) ~ "AA"
))
names(df)
colnames(df)
head(df)
df %>%
group_by(Ptt) %>%
mutate(area = case_when(
(bat.depth>= -500 & Latitude >= -20.0000) ~ "AR",
(bat.depth<= -500 & Latitude >= -20.0000) ~ "AR",
(bat.depth<= -500 & Latitude <= -20.0000) ~ "AM",
(bat.depth>= -500 & Latitude <= -20.0000) ~ "AR",
(Latitude <= -51.0000) ~ "AA"
))
data<-data.frame(id=seq(1,10,1),DX1=c(1,0,4,0,0,4,1,0,0,0),DX2=c(1,0,4,0,4,0,0,4,0,0),DX3=c(1,0,5,0,1,5,1,0,5,0))
data$indicator<-ifelse(data$DX1>=3|data$DX2>=3|data$DX3>=3,1,0)
data
data$max<-apply(X = data, MARGIN = 1, FUN = max, na.rm = TRUE)
data<-data%>%mutate(variable=ifelse(max>3,1,0))
data
data<-data%>%mutate(indicator=if_else(vars(contains("DX")),   any_vars(.>=3)) , 1, 0)
?syms
data<-data%>%mutate(indicator=if_else(vars(starts_with("DX.")),   any_vars(.>=3)) , 1, 0)
data<-data%>%mutate(indicator=if_else(select(starts_with("DX.")),   any_vars(.>=3)) , 1, 0)
data<-data%>%mutate(indicator=if_else(select(starts_with("DX.") &   any_vars(.>=3)) , 1, 0)
data<-data%>%mutate(indicator=if_else(select(starts_with("DX.") &   any_vars(.>=3)) , 1, 0)
)
mutate(g = ifelse(condition1, 2, ifelse(condition2, 3, g))
names(df)
x <- plyr::ddply(df, ~Ptt, function(d){
d$area <- NA
d$area[d$bat.depth >= -500 &  d$Latitude >= -20.0000] <- "AR"
d$area[d$bat.depth <= -500 &  d$Latitude >= -20.0000] <- "AR"
d$area[d$bat.depth <= -500 &  d$Latitude <= -20.0000] <- "AM"
d$area[d$bat.depth >= -500 &  d$Latitude <= -20.0000] <- "AM"
d$area[d$Latitude <= -51.0000] <- "AA"
})
data<-data.frame(id=seq(1,10,1),DX1=c(1,0,4,0,0,4,1,0,0,0),DX2=c(1,0,4,0,4,0,0,4,0,0),DX3=c(1,0,5,0,1,5,1,0,5,0))
data$indicator<-ifelse(data$DX1>=3|data$DX2>=3|data$DX3>=3,1,0)
data
data$max<-apply(X = data, MARGIN = 1, FUN = max, na.rm = TRUE)
data<-data%>%mutate(variable=ifelse(max>3,1,0))
data
data<-data%>%mutate(indicator=if_else(select(starts_with("DX.") &   any_vars(.>=3))) , 1, 0)
)
mutate(g = ifelse(condition1, 2, ifelse(condition2, 3, g))
names(df)
x <- plyr::ddply(df, ~Ptt, function(d){
d$area <- NA
d$area[d$bat.depth >= -500 &  d$Latitude >= -20.0000] <- "AR"
d$area[d$bat.depth <= -500 &  d$Latitude >= -20.0000] <- "AR"
d$area[d$bat.depth <= -500 &  d$Latitude <= -20.0000] <- "AM"
d$area[d$bat.depth >= -500 &  d$Latitude <= -20.0000] <- "AM"
d$area[d$Latitude <= -51.0000] <- "AA"
})
data<-data.frame(id=seq(1,10,1),DX1=c(1,0,4,0,0,4,1,0,0,0),DX2=c(1,0,4,0,4,0,0,4,0,0),DX3=c(1,0,5,0,1,5,1,0,5,0))
data$indicator<-ifelse(data$DX1>=3|data$DX2>=3|data$DX3>=3,1,0)
data
data$max<-apply(X = data, MARGIN = 1, FUN = max, na.rm = TRUE)
data<-data%>%mutate(variable=ifelse(max>3,1,0))
data
data<-data%>%mutate(indicator=if_else(select(starts_with("DX.") &   any_vars(.>=3))) , 1, 0)
)
data<-data%>%mutate(indicator=if_else(select(starts_with("DX.") &   any_vars(.>=3))) , 1, 0)
data
data %>%
select(starts_with("DX."))
data %>%
select(starts_with("DX"))
data %>%
select(starts_with("DX") & any_vars(>=3))
data %>%
select(starts_with("DX") & any_vars(.>=3))
mutate(g = ifelse(condition1, 2, ifelse(condition2, 3, g))
names(df)
x <- plyr::ddply(df, ~Ptt, function(d){
d$area <- NA
d$area[d$bat.depth >= -500 &  d$Latitude >= -20.0000] <- "AR"
d$area[d$bat.depth <= -500 &  d$Latitude >= -20.0000] <- "AR"
d$area[d$bat.depth <= -500 &  d$Latitude <= -20.0000] <- "AM"
d$area[d$bat.depth >= -500 &  d$Latitude <= -20.0000] <- "AM"
d$area[d$Latitude <= -51.0000] <- "AA"
})
data<-data.frame(id=seq(1,10,1),DX1=c(1,0,4,0,0,4,1,0,0,0),DX2=c(1,0,4,0,4,0,0,4,0,0),DX3=c(1,0,5,0,1,5,1,0,5,0))
data$indicator<-ifelse(data$DX1>=3|data$DX2>=3|data$DX3>=3,1,0)
data
data$max<-apply(X = data, MARGIN = 1, FUN = max, na.rm = TRUE)
data<-data%>%mutate(variable=ifelse(max>3,1,0))
data
data<-data%>%mutate(indicator=if_else(select(starts_with("DX.") &   any_vars(.>=3))) , 1, 0)
data
data %>%
select(starts_with("DX") & any(Value, na.rm = TRUE) >= 3))
data %>%
select(starts_with("DX") & any(Value, na.rm = TRUE) >= 3)
data %>%
select(starts_with("DX") & any(na.rm = TRUE) >= 3)
data %>%
select(starts_with("DX") & any(.>=3))
data %>%
select(starts_with("DX") & any(>=3))
data %>%
select(starts_with("DX"))
data %>%
select(starts_with("DX")) %>%
filter(all_vars(.>=3))
data %>%
select(starts_with("DX")) %>%
filter(all_vars( . >=3))
data %>%
select(starts_with("DX")) %>%
filter(all_vars( . >2))
data %>%
select(starts_with("DX")) %>%
filter_all(any_vars(. >= 3))
data %>%
select(starts_with("DX")) & filter_all(any_vars(. >= 3))
data %>%
(select(starts_with("DX")) & filter_all(any_vars(. >= 3)))
data<-data%>%mutate(indicator=if_else(select(starts_with("DX")),   filter_all(any_vars(. >= 3)) , 1, 0)
data<-data%>%mutate(indicator=if_else(select(starts_with("DX")),   filter_all(any_vars(. >= 3)) , 1, 0)
)
data<-data%>%mutate(indicator=if_else(select(starts_with("DX")),   filter_all(any_vars(. >= 3))) , 1, 0)
data<-data%>%mutate(indicator=if_else(select(starts_with("DX")),   filter_all(any_vars(. >= 3)) , 1, 0))
data %>%
mutate(indicator = if_else(select(start("DX")) & filter_all(any_vars(. >=3)), 1,0))
data %>%
mutate(indicator = if_else(select(start("DX")), 1,0))
mutate(indicator = if_else(select(starts_with("DX")), 1,0)
data %>%
mutate(indicator = if_else(select(starts_with("DX")), 1,0)
)
data %>%
mutate(indicator = if_else(select(starts_with("DX")), 1,0))
data %>%
data %>%
mutate(indicator = if_else(select(starts_with("DX"))))
data %>%
mutate(indicator = if_else(select(starts_with("DX"))))
library(dplyr)
a <- c("M", "F", "12")
a %in% "M", "F"
[a %in% c("M", "F"),]
my_data <- read.csv("~/stackOverflow_qns/easy.csv", header = T)
head(my_data)
my_data[my_data$Gender %in% c("Male", "Female"),]
my_data[my_data$Gender %in% c("Male", "Female"),]
my_data[my_data$Gender %in% c("Male"),]
my_data[my_data$Gender %in% "Male",]
class(my_data$Gender)
my_data %>%
filter(!Gender == c("Male", "Female"))
my_data %>%
filter(Gender == !c("Male", "Female"))
my_data %>%
filter(!Gender == ("Male", "Female"))
my_data %>%
filter(!Gender == c("Male", "Female"))
my_data %>%
filter(Gender  starts_with("M|F"))
my_data %>%
filter(Gender  starts_with(MF))
my_data %>%
filter(Gender  starts_with("MF"))
class(my_data$Gender)
table(my_data$Gender)
my_data1 <- subset(my_data, (my_data$Gender=="Male" | my_data$Gender=="Female")
my_data1 <- subset(my_data, (my_data$Gender=="Male" | my_data$Gender=="Female")
)
my_data1 <- subset(my_data, (my_data$Gender=="Male" | my_data$Gender=="Female"))
table(my_data1$G)
table(my_data1$Gender)
my_data1 <- subset(my_data, (my_data$Gender="Male"| my_data$Gender="Female"))
my_data1 <- subset(my_data, my_data$Gender=="Male"| my_data$Gender="Female")
my_data1 <- subset(my_data, my_data$Gender=="Male"| my_data$Gender=="Female")
my_data1 <- subset(my_data, my_data$Gender=="Male"| my_data$Gender=="Female")
my_data1 <- subset(my_data, (my_data$Gender=="Male"))
my_data1 <- subset(my_data, (my_data$Gender=="Male"))
my_data1 <- subset(my_data, my_data$Gender=="Male")
my_data1 <- subset(my_data, my_data$Gender=='Male')
my_data <- read.csv("~/stackOverflow_qns/easy.csv", header = T)
my_data1 <- subset(my_data, my_data$Gender=='Male')
my_data1 <- subset(my_data, (my_data$Gender=='Male' | my_data$Gender == "Female"))
View(my_data1)
my_data <- read.csv("~/stackOverflow_qns/easy.csv", header = T)
my_data1 <- subset(my_data, (my_data$Gender=='Male' | my_data$Gender == "Female"))
View(my_data1)
my_data1 <- subset(my_data, (my_data$Gender=='Male' | my_data$Gender == "Female"))            na.exclude(my_data1)
View(my_data1)
my_data1 <- subset(my_data, (my_data$Gender=='Male' | my_data$Gender == "Female"))            na.exclude(my_data1)
my_data1 <- subset(my_data, (my_data$Gender=='Male' | my_data$Gender == "Female"))
na.exclude(my_data1)
mydf <- my_data
my_data1 <- my_data
View(my_data1)
my_data1$Gender <- factor(my_data$Gender, levels = c("Male", "Female"))
View(my_data1)
my_data1$Age <- as.numeric(my_data1$Age)
View(my_data1)
my_data <- read.csv("~/stackOverflow_qns/easy.csv", header = T)
mydf <- my_data
my_data1 <- my_data
my_data1$Gender <- factor(my_data$Gender, levels = c("Male", "Female"))
View(my_data)
View(my_data1)
my_data1$Age <- as.numeric(my_data1$Age)
View(my_data1)
View(my_data)
?as.numeric
as.numeric(abc)
as.numeric("abc")
my_data1 <- my_data
View(my_data1)
View(my_data1)
View(my_data1)
my_data1$Age <- as.numeric(my_data1$Age)
my_data1 <- my_data
my_data1$Gender <- factor(my_data$Gender, levels = c("Male", "Female"))
my_data1$Age <- numeric(my_data1$Age)
my_data1$Age <- as.numeric(my_data1$Age)
x = c(1820.0, 2235.0, 2534.0, 2580.0, 2322.0, 2317.0, 2331.0, 2345.0, 2305.0, 2265.0, 2277.0, 2289.0, 2338.0, 2387.0, 2152.0, 2256.0, 2360.0, 2590.0, 2529.0, 2468.0, 2776.0, 2909.0, 3017.0, 3081.0, 3118.5, 3156.0, 3338.0, 3211.5)
x
typeof(x)
class(x)
neighbour_m = function(x){
newx = c(x[length(x)],x,x[1])
for (i in 2:(length(newx)-1)){
m = mean(c(newx[i-1],newx[i+1]))
}
}
mean(1820,2534)
neighbour_m(x)
neighbour_m(x)
neighbour_m()
neighbour_m(1)
library(lubridate)
?lubridate
y-m-d(2019-05-15T01:42:15.072Z)
ymd_hms(2019-05-15T01:42:15.072Z)
ymd(2019-05-15T01:42:15.072Z)
is.POSIXct(2019-05-15T01:42:15.072Z)
toda
today
today ()
# the url for the online CSV
url <- "https://www.data.gov/media/federal-agency-participation.csv"
# use read.csv to import
data_gov <- read.csv(url, stringsAsFactors = FALSE)
url1 <- "https://s3.amazonaws.com/bsp-ocsit-prod-east-appdata/datagov/wordpress/agency-participation.csv"
# use read.csv to import
data_gov <- read.csv(url1, stringsAsFactors = FALSE)
# for brevity I only display fi rst 6 rows
data_gov[1:6, c(1,3:4)]
# for brevity I only display fi rst 6 rows
data_gov[1:6, c(1,3:4,5)]
library(gdata)
# the url for the online Excel file
url <- "http://www.huduser.org/portal/datasets/fmr/fmr2015f/FY2015F_4050_Final.xls"
# use read.xls to import
rents <- read.xls(url)
rents[1:6, 1:10]
# url location
url <- "http://www.bls.gov/cex/pumd/data/comma/diary14.zip"
download.file(url, destfile = "~/data_analysis/data/", mode = "wb")
download.file(url, destfile = "~/data_analysis/data/dataset.zip", mode = "wb")
unzip("~/data_analysis/data/dataset.zip", exdir = "./")
unzip("~/data_analysis/data/dataset.zip", exdir = "~/data_analysis/data/")
setwd("~/data_analysis/")
list.files("./data/diary14/")
# Create a temp. fi le name
temp <- tempfi le ()
# Create a temp. fi le name
temp <- tempfile ()
# Use download.fi le() to fetch the fi le into the temp. fi le
download.file ("http://www.bls.gov/cex/pumd/data/comma/diary14.zip",temp)
# -------------------------------------------------------------------------
# Use unz() to extract the target file from temp. file
zip_data2 <- read.csv(unz(temp, "diary14/expd141.csv"))
# Remove the temp file via unlink()
unlink (temp)
zip_data2[1:5, 1:10]
View(zip_data2)
library (XML)
library (XML)
# url hosting multiple links to data sets
url <- "http://download.bls.gov/pub/time.series/ap/"
# identify the links available
links <- getHTMLLinks(url)
# url hosting multiple links to data sets
url <- "http://download.bls.gov/pub/time.series/ap/"
# identify the links available
links <- getHTMLLinks(url)
# identify the links available
links <- getHTMLLinks(url, externalOnly = TRUE)
url <- "http://www.elections.state.md.us/elections/2012/election_data/index.html"
# identify the links available
links <- getHTMLLinks(url, externalOnly = TRUE)
# identify the links available
links <- getHTMLLinks(url)
# url hosting multiple links to data sets
url <- "http://download.bls.gov/pub/time.series/ap/"
# identify the links available
links <- getHTMLLinks(url)
library(xml2)
# url hosting multiple links to data sets
url <- "http://download.bls.gov/pub/time.series/ap/"
links <- read_html(url)
links
# identify the links available
links <- getHTMLLinks(url) # using XML (not working)
# -------------------------------------------------------------------------
library(shiny)
# -------------------------------------------------------------------------
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Change the number",
value = 25, min = 2, max = 100)
)
# -------------------------------------------------------------------------
server <- function(input, output, session) {
}
# -------------------------------------------------------------------------
shinyApp(ui, server)
names(tags)
# -------------------------------------------------------------------------
library(shiny)
# -------------------------------------------------------------------------
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Change the number",
value = 25, min = 2, max = 100),
plotOutput("hist"),
tags$a(href="http://www.git.com", "Git")
)
# -------------------------------------------------------------------------
server <- function(input, output, session) {
}
# -------------------------------------------------------------------------
shinyApp(ui, server)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
# -------------------------------------------------------------------------
server <- function(input, output, session) {
}
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
# -------------------------------------------------------------------------
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(fitdistrplus)
library(logspline)
library(fitdistrplus)
library(logspline)
x <- c(37.50,46.79,48.30,46.04,43.40,39.25,38.49,49.51,40.38,36.98,40.00,
38.49,37.74,47.92,44.53,44.91,44.91,40.00,41.51,47.92,36.98,43.40,
42.26,41.89,38.87,43.02,39.25,40.38,42.64,36.98,44.15,44.91,43.40,
49.81,38.87,40.00,52.45,53.13,47.92,52.45,44.91,29.54,27.13,35.60,
45.34,43.37,54.15,42.77,42.88,44.26,27.14,39.31,24.80,16.62,30.30,
36.39,28.60,28.53,35.84,31.10,34.55,52.65,48.81,43.42,52.49,38.00,
38.65,34.54,37.70,38.11,43.05,29.95,32.48,24.63,35.33,41.34)
############### let's describe the distribution #
descdist(x , discrete = FALSE)
fit.weibull <- fitdist(x, "weibull")
fit.norm <- fitdist(x, "norm")
plot(fit.norm)
plot(fit.weibull)
fit.weibull$aic
fit.norm$aic
library(ggplot2)
fitdist(x)
fitdistrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr(x)
fitdistr(x)
fitdistr(x, densfun = "norm")
n.sims <- 5e4
n.sims
stats <- replicate(n.sims, {
r <- rweibull(n = length(x)
, shape= fit.weibull$estimate["shape"]
, scale = fit.weibull$estimate["scale"]
)
estfit.weibull <- fitdist(r, "weibull") # added to account for the estimated parameters
as.numeric(ks.test(r
, "pweibull"
, shape= estfit.weibull$estimate["shape"]
, scale = estfit.weibull$estimate["scale"])$statistic
)
})
# The ECDF of the simulated KS-statistics looks like follows:
plot(ecdf(stats), las = 1, main = "KS-test statistic simulation (CDF)", col = "darkorange", lwd = 1.7)
grid()
fit <- logspline(stats)
1 - plogspline(ks.test(x
, "pweibull"
, shape= fit.weibull$estimate["shape"]
, scale = fit.weibull$estimate["scale"])$statistic
, fit
)
xs <- seq(10, 65, len=500)
true.weibull <- rweibull(1e6, shape= fit.weibull$estimate["shape"]
, scale = fit.weibull$estimate["scale"])
boot.pdf <- sapply(1:1000, function(i) {
xi <- sample(x, size=length(x), replace=TRUE)
MLE.est <- suppressWarnings(fitdist(xi, distr="weibull"))
dweibull(xs, shape=MLE.est$estimate["shape"],  scale = MLE.est$estimate["scale"])
}
)
boot.cdf <- sapply(1:1000, function(i) {
xi <- sample(x, size=length(x), replace=TRUE)
MLE.est <- suppressWarnings(fitdist(xi, distr="weibull"))
pweibull(xs, shape= MLE.est$estimate["shape"],  scale = MLE.est$estimate["scale"])
}
)
par(bg="white", las=1, cex=1.2)
plot(xs, boot.pdf[, 1], type="l", col=rgb(.6, .6, .6, .1), ylim=range(boot.pdf),
xlab="x", ylab="Probability density")
for(i in 2:ncol(boot.pdf)) lines(xs, boot.pdf[, i], col=rgb(.6, .6, .6, .1))
quants <- apply(boot.pdf, 1, quantile, c(0.025, 0.5, 0.975))
min.point <- apply(boot.pdf, 1, min, na.rm=TRUE)
max.point <- apply(boot.pdf, 1, max, na.rm=TRUE)
lines(xs, quants[1, ], col="red", lwd=1.5, lty=2)
lines(xs, quants[3, ], col="red", lwd=1.5, lty=2)
lines(xs, quants[2, ], col="darkred", lwd=2)
par(bg="white", las=1, cex=1.2)
plot(xs, boot.cdf[, 1], type="l", col=rgb(.6, .6, .6, .1), ylim=range(boot.cdf),
xlab="x", ylab="F(x)")
for(i in 2:ncol(boot.cdf)) lines(xs, boot.cdf[, i], col=rgb(.6, .6, .6, .1))
quants <- apply(boot.cdf, 1, quantile, c(0.025, 0.5, 0.975))
min.point <- apply(boot.cdf, 1, min, na.rm=TRUE)
max.point <- apply(boot.cdf, 1, max, na.rm=TRUE)
lines(xs, quants[1, ], col="red", lwd=1.5, lty=2)
lines(xs, quants[3, ], col="red", lwd=1.5, lty=2)
lines(xs, quants[2, ], col="darkred", lwd=2)
